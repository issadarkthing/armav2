"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function boundValue(input, arr) {
    return input < arr.length ? arr[input] : boundValue(input - arr.length, arr);
}
function boundIndex(input, arr) {
    return input < arr.length ? input : boundIndex(input - arr.length, arr);
}
function fromCharCode(arr) {
    return arr.map(v => String.fromCharCode(v));
}
function range(start, end) {
    return Array.from({ length: end - start }, (v, i) => i + start);
}
function splitHalf(arr) {
    const middle = Math.round(arr.length / 2);
    const fst = arr.slice(0, middle);
    const snd = arr.slice(middle);
    return [fst, snd];
}
function sum(arr) {
    if (arr.length === 0)
        return 0;
    if (arr.length === 1)
        return arr[0];
    const [fst, snd] = splitHalf(arr);
    return sum(fst) + sum(snd);
}
function scramble(key, arr, resultArr = [], startIndex = 0) {
    if (arr.length === 0)
        return resultArr;
    const index = boundIndex(key + startIndex, arr);
    return scramble(key, remove(index, 1, arr), [...resultArr, arr[index]], index);
}
function remove(start, count, arr) {
    const first = arr.slice(0, start);
    const second = arr.slice(start + count);
    return [...first, ...second];
}
function repeat(n, fn, acc) {
    if (n === 0)
        return acc;
    return repeat(n - 1, fn, fn(acc));
}
function recursiveScramble(key, layer, arr) {
    if (layer === 0)
        return arr;
    return repeat(layer, (acc) => scramble(key, acc), arr);
}
function createKey(key) {
    return sum(key.split("").map(x => x.charCodeAt(0)));
}
function isSubSetOf(s1, s2) {
    return s1.every(x => s2.includes(x));
}
const upperCaseLetters = fromCharCode(range(65, 91));
const lowerCaseLetters = fromCharCode(range(97, 123));
const numbers = fromCharCode(range(48, 58));
const symbols = fromCharCode([...range(33, 48), ...range(58, 65), ...range(91, 97), ...range(123, 127)]);
const allCombinations = numbers.concat(upperCaseLetters, lowerCaseLetters, symbols);
// user@website.com
/**
 *
 * @param user `user@website.com`
 * @param passw
 * @param options
 */
function createPassword(user, passw, options) {
    const length = options.length;
    const layer = options.recursionLayer;
    const _lowerCaseLetters = options.lowerCaseLetters ? lowerCaseLetters : [];
    const _upperCaseLetters = options.upperCaseLetters ? upperCaseLetters : [];
    const _numbers = options.numbers ? numbers : [];
    const _symbols = options.symbols ? symbols : [];
    const combinations = _lowerCaseLetters.concat(_upperCaseLetters, _numbers, _symbols);
    const key = createKey(user + passw);
    const combinationSet = scramble(key + length, [_lowerCaseLetters, _upperCaseLetters, _numbers, _symbols].filter(v => v.length !== 0));
    //ensures the password has some characters of all selected combinations
    const result = Array.from({ length }, (v, i) => recursiveScramble(key + length * layer + i, layer, combinations)
        .find((v) => boundValue(i, combinationSet).includes(v))).join("");
    return result;
}
exports.createPassword = createPassword;
exports.profile = {
    upperCaseLetters: true,
    lowerCaseLetters: true,
    numbers: true,
    symbols: true,
    recursionLayer: 9,
    length: 24,
    websites: []
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLFNBQVMsVUFBVSxDQUFJLEtBQWEsRUFBRSxHQUFRO0lBQzVDLE9BQU8sS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBSSxLQUFhLEVBQUUsR0FBUTtJQUM1QyxPQUFPLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN6RSxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBYTtJQUNqQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDN0MsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQWEsRUFBRSxHQUFXO0lBQ3ZDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7QUFDakUsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFJLEdBQVE7SUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxL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